// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	email "github.com/myfreeweb/go-email/email"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeGithubComMyfreewebMail2elasticsearch(in *jlexer.Lexer, out *JMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.Id = string(in.String())
		case "h":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(email.Header)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pre":
			if in.IsNull() {
				in.Skip()
				out.Preamble = nil
			} else {
				out.Preamble = in.Bytes()
			}
		case "epi":
			if in.IsNull() {
				in.Skip()
				out.Epilogue = nil
			} else {
				out.Epilogue = in.Bytes()
			}
		case "p":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*JMessage, 0, 8)
					} else {
						out.Parts = []*JMessage{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *JMessage
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(JMessage)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Parts = append(out.Parts, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.SubMessage = nil
			} else {
				if out.SubMessage == nil {
					out.SubMessage = new(JMessage)
				}
				(*out.SubMessage).UnmarshalEasyJSON(in)
			}
		case "t":
			out.TextBody = string(in.String())
		case "a":
			out.Attachment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComMyfreewebMail2elasticsearch(out *jwriter.Writer, in JMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"_id\":")
		out.String(string(in.Id))
	}
	if len(in.Header) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Header {
				if !v6First {
					out.RawByte(',')
				}
				v6First = false
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6Value {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.String(string(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Preamble) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pre\":")
		out.Base64Bytes(in.Preamble)
	}
	if len(in.Epilogue) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"epi\":")
		out.Base64Bytes(in.Epilogue)
	}
	if len(in.Parts) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p\":")
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Parts {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SubMessage != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sub\":")
		if in.SubMessage == nil {
			out.RawString("null")
		} else {
			(*in.SubMessage).MarshalEasyJSON(out)
		}
	}
	if in.TextBody != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"t\":")
		out.String(string(in.TextBody))
	}
	if in.Attachment != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"a\":")
		out.String(string(in.Attachment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComMyfreewebMail2elasticsearch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComMyfreewebMail2elasticsearch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComMyfreewebMail2elasticsearch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComMyfreewebMail2elasticsearch(l, v)
}
